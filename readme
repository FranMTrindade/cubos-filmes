#  Cubos Movies ‚Äì Backend (NestJS + Prisma + PostgreSQL)



##  Tecnologias Utilizadas

###  Backend
- **NestJS** ‚Äì Framework Node.js modular e escal√°vel.
- **Prisma ORM** ‚Äì ORM moderno e perform√°tico para PostgreSQL.
- **PostgreSQL** ‚Äì Banco de dados relacional seguro e confi√°vel.
- **JWT (JSON Web Token)** ‚Äì Autentica√ß√£o e autoriza√ß√£o seguras.
- **AWS S3** ‚Äì Armazenamento de imagens.
- **SendGrid** ‚Äì Envio de e-mails sem necessidade de dom√≠nio pr√≥prio.
- **Docker + Docker Compose** ‚Äì Orquestra√ß√£o de containers (DB, Backend e Frontend).

### Frontend
- **Next.js 14** ‚Äì Framework React com suporte a SSR e App Router.
- **Ant Design (antd)** ‚Äì Biblioteca de componentes com amplo leque de op√ß√µes.
- **React Query** ‚Äì Cache e controle de requisi√ß√µes ass√≠ncronas.
- **Tailwind CSS** ‚Äì Estiliza√ß√£o utilit√°ria para layouts responsivos e consistentes.

---

## üí° Decis√µes de Arquitetura

### ü™£ **AWS S3 ‚Äì Armazenamento de Imagens**
O **Amazon S3** foi escolhido por sua **alta disponibilidade, durabilidade e escalabilidade**, permitindo armazenar e servir imagens com baixo custo e performance est√°vel.

**Motivos da escolha:**
- Suporte direto via SDK AWS para Node.js.
- F√°cil integra√ß√£o com o NestJS para upload e exclus√£o de imagens.
- Permite versionamento e controle granular de permiss√µes.
- Evita sobrecarga no servidor principal, mantendo o backend leve.

**Uso no projeto:**
- Upload autom√°tico de imagens de filmes via `formData`.
- Exclus√£o da imagem antiga no momento de edi√ß√£o.
- Retorno da URL p√∫blica no registro do filme.

---

### **SendGrid ‚Äì Envio de E-mails**
O **SendGrid** foi adotado como servi√ßo de envio de e-mails por oferecer uma **API moderna, r√°pida e confi√°vel**, al√©m de **n√£o exigir dom√≠nio pr√≥prio para envio** ‚Äî o que facilita o uso em ambientes de desenvolvimento e testes.

**Motivos da escolha:**
- Permite envio de e-mails sem dom√≠nio personalizado.
- Alta taxa de entrega e monitoramento em tempo real.
- Facilidade de integra√ß√£o via SDK oficial ou HTTP API.
- Mantido pela Twilio, garantindo estabilidade e suporte.

**Importante:**
- Como o envio √© feito via API e sem dominio proprio o email pode cair no sapan

---

###  **Frontend (Next.js + Ant Design)**
O **frontend** do projeto foi desenvolvido em **Next.js**, utilizando **Ant Design** como biblioteca de componentes.

**Motivos da escolha:**
- O **Next.js** oferece **SSR (Server Side Rendering)**, **rotas din√¢micas** e **App Router**, otimizando performance.
- O **Ant Design** foi escolhido por possuir **um leque mais amplo de componentes** prontos em compara√ß√£o ao Radix UI, permitindo desenvolvimento mais √°gil e visual consistente.
- Integra√ß√£o fluida com React Query para gerenciamento de estados e requisi√ß√µes.

---



# Como Rodar o Projeto

##  Usando Docker (recomendado)

Na raiz do projeto, execute:

```bash
docker compose up --build
```

***exemplo .env**

POSTGRES_USER=movies_cubo
POSTGRES_PASSWORD=mvcubo
POSTGRES_DB=movies_db

#  Backend (NestJS) 
# Em caso de uso do docker deve estar tamb√©m na raiz
DATABASE_URL=postgresql://movies_cubo:mvcubo@postgres:5432/movies_db?schema=public
JWT_SECRET=supersecretkey
JWT_EXPIRES_IN=1h
BACKEND_PORT=3001

#  AWS S3
AWS_ACCESS_KEY_ID=SEU_ACCESS_KEY
AWS_SECRET_ACCESS_KEY=SEU_SECRET_KEY
AWS_REGION=us-east-2
AWS_S3_BUCKET=cubo-filme-images

#  SendGrid
SENDGRID_API_KEY=SUA_CHAVE_SENDGRID
SENDGRID_FROM_EMAIL=progfrancisco@gmail.com

#  Frontend (Next.js)
NEXT_PUBLIC_API_URL=http://backend:3001

O comando sobe **tr√™s containers**:

| Servi√ßo            | Porta | Fun√ß√£o                 |
|--------------------|------:|------------------------|
| PostgreSQL         |  5432 | Banco de dados         |
| Backend (NestJS)   |  3001 | API principal          |
| Frontend (Next.js) |  3000 | Interface do usu√°rio   |

A API estar√° dispon√≠vel em:  
 **http://localhost:3001**

O frontend estar√° dispon√≠vel em:  
 **http://localhost:3000**

---

## üîπ Rodando Localmente (sem Docker)

Instale as depend√™ncias:

```bash
npm install
```

Gere o Prisma Client:

```bash
npx prisma generate
```

Execute as migrations:

```bash
npx prisma migrate dev
```

Rode o servidor:

```bash
npm run start:dev
```

A aplica√ß√£o ser√° iniciada em **http://localhost:3001**.

---

## üß™ Testes Realizados

### Auth

- [x] **Registrar usu√°rio**  
  *Resultado esperado:* criar usu√°rio

- [x] **Registrar usu√°rio com mesmo e-mail**  
  *Resultado esperado:* n√£o deixar criar pois j√° existe

- [x] **Login**  
  *Resultado esperado:* retornar access token e refresh token

- [x] **Login com usu√°rio inexistente**  
  *Resultado esperado:* erro de credenciais inv√°lidas

---

### Filmes

- [x] **Criar filme (body: formData)**  
  *Resultado esperado:* salvar filme e enviar imagem para S3

- [x] **Criar filme com mesmo nome e data de lan√ßamento**  
  *Resultado esperado:* erro de duplicidade

- [x] **Editar filme**  
  *Resultado esperado:* atualizar apenas campos modificados

- [x] **Editar filme com usu√°rio diferente**  
  *Resultado esperado:* erro de permiss√£o

- [x] **Editar filme trocando apenas imagem (body: formData)**  
  *Resultado esperado:* excluir imagem antiga e salvar nova no S3


- [x] **Buscar todos os filmes**  
  *Resultado esperado:* retorno paginado (limite padr√£o 10 por p√°gina)

- [x] **Buscar filmes com filtro de per√≠odo**  
  **URL:** `http://localhost:3001/movies?startDate=2025-10-17&endDate=2025-10-18`  
  *Resultado esperado:* filmes dentro do per√≠odo

- [x] **Buscar filmes por nome**  
  **URL:** `http://localhost:3001/movies?name=Vingadores`  
  *Resultado esperado:* filmes que contenham o nome informado

- [x] **Buscar filmes por g√™nero**  
  **URL:** `http://localhost:3001/movies?genre=A√ß√£o`  
  *Resultado esperado:* filmes filtrados pelo g√™nero

- [x] **Buscar filmes combinando filtros**  
  **URL:** `http://localhost:3001/movies?name=Vingadores&startDate=2025-10-17&endDate=2025-10-18`  
  *Resultado esperado:* filtros aplicados simultaneamente

- [x] **Deletar filme**  
  *Resultado esperado:* remover filme do banco

- [x] **Deletar filme com usu√°rio diferente**  
  *Resultado esperado:* erro de permiss√£o

---


